package Qublog::Schema::Result::JournalSession;
use Moose;
extends qw( Qublog::Schema::Result );

with qw( Qublog::Schema::Role::Itemized );

=head1 NAME

Qublog::Schema::Result::JournalSession - group entries into sessions

=head1 DESCRIPTION

At a given moment, each user will have one or more sessions running. Sessions have entries and comments.

=head1 SCHEMA

=head2 id

The autogenerated ID column.

=head2 name

The name of the session.

=head2 owner

The owner of the session. This is the L<Qublog::Schema::Result::User> object that has access to this session.

=head2 use_timers

Whether or not this session should start timers whenever the topic changes.

=head2 start_time

The time the session is started.

=head2 stop_time

The time the session ended, or C<undef>.

=head2 journal_entries

A result set of the L<Qublog::Schema::Result::JournaEntry> objects in this session.

=head2 journal_timers

A result set of the L<Qublog::Schema::Result::JournalTimer> objects in this session.

=head2 comments

A result set of the L<Qublog::Schema::Result::Comment> objects in this session.

=cut

__PACKAGE__->load_components(qw( InflateColumn::DateTime Core ));
__PACKAGE__->table('journal_sessions');
__PACKAGE__->add_columns(
    id         => { data_type => 'int' },
    name       => { data_type => 'text' },
    owner      => { data_type => 'int' },
    use_timers => { data_type => 'bool' },
    start_time => { data_type => 'datetime', timezone => 'UTC' },
    stop_time  => { data_type => 'datetime', timezone => 'UTC' },
);
__PACKAGE__->set_primary_key('id');
__PACKAGE__->belongs_to( owner => 'Qublog::Schema::Result::User' );
__PACKAGE__->has_many( journal_entries => 'Qublog::Schema::Result::JournalEntry', 'journal_session' );
__PACKAGE__->many_to_many( journal_timers => journal_entries => 'journal_timers' );
__PACKAGE__->has_many( comments => 'Qublog::Schema::Result::Comment', 'journal_session');
__PACKAGE__->resultset_class('Qublog::Schema::ResultSet::JournalSession');

=head1 METHODS

=head2 as_journal_item

Does nothing. See L<Qublog::Schema::Role::Itemized>.

=cut

sub as_journal_item {}

=head2 list_journal_item_resultsets

Returns the journal entries belonging to this session.

=cut

sub list_journal_item_resultsets {
    my ($self, $options) = @_;

    my $entries = $self->journal_entries(undef, {
        order_by => { -asc => 'start_time' },
    });

    return [ $entries ];
}

=head2 start_timer

  $journal_session->start_timer

Clears the stop time so that the session will be considered open again.

=cut

sub start_timer {
    my $self = shift;

    $self->stop_time(undef);
    $self->update;

    return $self;
}

=head2 stop_timer

  $journal_session->stop_timer($c->now);

Sets the stop time to right now. This will stop any running journal entries as well.

=cut

sub stop_timer {
    my ($self, $now) = shift;
    my $schema = $self->result_source->schema;

    $schema->txn_do(sub {
        my $entries = $self->journal_entries;

        $now //= Qublog::DateTime->now;
        while (my $entry = $entries->next) {
            $entry->stop_timer($now);
        }

        $self->stop_time($now);
        $self->update;
    });

    return $self;
}

=head2 is_running

Returns true if L</stop_time> is not set.

=cut

sub is_running {
    my $self = shift;
    return not defined $self->stop_time;
}

=head1 SEE ALSO

L<Qublog::Schema::ResultSet::JournalSession>

=head1 AUTHOR

Andrew Sterling Hanenkamp, C<< <hanenkamp@cpan.org> >>

=head1 LICENSE

Qublog Personal/Professional Journaling
Copyright (C) 2010  Andrew Sterling Hanenkamp

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

1;
